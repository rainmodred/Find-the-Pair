{"version":3,"sources":["src/js/Cards.js","src/js/Game.js","index.js"],"names":["Cards","cardsArray","sort","a","b","Math","random","index","Game","lives","newGame","cardsClicked","opened","moves","openToWin","cardName","clickedCardsArray","push","card1","card2","dataset","name","createCards","cards","forEach","card","document","createElement","classList","add","front","back","handleCardClick","gameDom","appendChild","closeCards","ms","setTimeout","remove","showGameOver","status","domSt","querySelector","span","innerHTML","gameOverDom","style","display","addEventListener","startNewGame","LIVES","updateStats","movesDom","textContent","game","livesDom","indexOf","clickedCards","length","compareCards","updateMoves","updateOpened","updateLives","removeCards","hasChildNodes","removeChild","lastChild","randomCards","window","onload"],"mappings":"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","file":"Find-the-Pair.e31bb0bc.js","sourceRoot":"..","sourcesContent":["export default class Cards {\r\n  constructor() {\r\n    this.cardsArray = [\r\n      'moon',\r\n      'moon',\r\n      'goat',\r\n      'rat',\r\n      'summer',\r\n      'winter',\r\n      'rabbit',\r\n      'sigma',\r\n      'new-moon',\r\n      'new-moon',\r\n      'goat',\r\n      'rat',\r\n      'summer',\r\n      'winter',\r\n      'rabbit',\r\n      'sigma',\r\n    ];\r\n  }\r\n\r\n  randomCards() {\r\n    this.cardsArray.sort((a, b) => {\r\n      return 0.5 - Math.random();\r\n    });\r\n  }\r\n\r\n  getName(index) {\r\n    return this.cardsArray[index];\r\n  }\r\n}\r\n","class Game {\r\n  constructor(lives) {\r\n    this.newGame(lives);\r\n    this.cardsClicked = 0;\r\n    this.opened = 0;\r\n    this.moves = 0;\r\n    this.lives = lives;\r\n    this.openToWin = 8;\r\n\r\n  }\r\n  newGame(lives) {\r\n    this.opened = 0;\r\n    this.moves = 0;\r\n    this.lives = lives;\r\n    this.openToWin = 8;\r\n  }\r\n\r\n  addClickedCardName(cardName) {\r\n    this.clickedCardsArray.push(cardName);\r\n  }\r\n\r\n  compareCards(card1, card2) {\r\n    return card1.dataset.name === card2.dataset.name;\r\n  }\r\n\r\n  updateLives() {\r\n    this.lives--;\r\n  }\r\n  \r\n  updateMoves() {\r\n    this.moves++;\r\n  }\r\n\r\n  updateOpened() {\r\n    this.opened++;\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import Cards from './src/js/Cards'\r\nimport Game from './src/js/Game'\r\n\r\nfunction createCards() {\r\n  cards.cardsArray.forEach(cardName => {\r\n    const card = document.createElement('div');\r\n\r\n    card.classList.add('card');\r\n    card.classList.add('flipped');\r\n    card.dataset.name = cardName;\r\n\r\n    const front = document.createElement('div');\r\n    front.classList.add('front');\r\n\r\n    const back = document.createElement('div');\r\n    back.classList.add('back');\r\n\r\n    handleCardClick(card);\r\n    gameDom.appendChild(card);\r\n    card.appendChild(front);\r\n    card.appendChild(back);\r\n  });\r\n}\r\n\r\nfunction closeCards(cards, ms) {\r\n  setTimeout(() => {\r\n    cards.forEach(card => {\r\n      card.classList.remove(card.dataset.name);\r\n      card.classList.add('flipped');\r\n    });\r\n  }, ms);\r\n}\r\n\r\nfunction showGameOver(status) {\r\n  const domSt = document.querySelector(`.${status}`)\r\n  const span = document.createElement('span');\r\n\r\n  span.classList.add('play-again');\r\n  span.innerHTML = 'Play again';\r\n  gameOverDom.style.display = 'block';\r\n  domSt.classList.add('status');\r\n  domSt.appendChild(span);\r\n  span.addEventListener('click', () => {\r\n    gameOverDom.style.display = 'none';\r\n    domSt.classList.remove('status');\r\n    startNewGame(LIVES);\r\n    span.remove();\r\n  });\r\n}\r\n\r\nfunction updateStats() {\r\n  movesDom.textContent = game.moves;\r\n  livesDom.textContent = game.lives;\r\n}\r\n\r\nfunction handleCardClick(card) {\r\n  card.addEventListener('click', () => {\r\n    if ([...card.classList].indexOf('flipped') === -1 || clickedCards.length > 1) {\r\n      return;\r\n    }\r\n    let cardName = card.dataset.name;\r\n    card.classList.remove('flipped');\r\n    card.classList.add(cardName);\r\n\r\n    clickedCards.push(card);\r\n\r\n    if (clickedCards.length === 2) {\r\n      compareCards();\r\n    }\r\n  });\r\n}\r\n\r\nfunction compareCards() {\r\n  game.updateMoves();\r\n  let compare = game.compareCards(...clickedCards);\r\n  if (compare) {\r\n    game.updateOpened();\r\n    clickedCards = [];\r\n    if (game.opened === game.openToWin) {\r\n      showGameOver('won');\r\n    }\r\n  } else {\r\n    game.updateLives();\r\n\r\n    if (game.lives === 0) {\r\n      showGameOver('lost');\r\n    }\r\n    closeCards(clickedCards, 1000);\r\n    clickedCards = [];\r\n    updateStats();\r\n  }\r\n}\r\n\r\nfunction removeCards() {\r\n  while (gameDom.hasChildNodes()) {\r\n    gameDom.removeChild(gameDom.lastChild);\r\n  }\r\n}\r\n\r\nfunction startNewGame(lives) {\r\n  removeCards();\r\n  game.newGame(lives);\r\n  cards.randomCards();\r\n  createCards();\r\n  movesDom.textContent = 0;\r\n  livesDom.textContent = 0;\r\n}\r\n\r\n\r\nconst LIVES = 20;\r\n\r\nconst gameDom = document.querySelector('.game');\r\nconst gameOverDom = document.querySelector('.game-over');\r\nconst movesDom = document.querySelector('.moves');\r\nconst livesDom = document.querySelector('.lives');\r\n\r\nconst game = new Game(LIVES);\r\nconst cards = new Cards();\r\n\r\nwindow.onload = () => updateStats()\r\n\r\nlet clickedCards = [];\r\nstartNewGame(LIVES);\r\n"]}